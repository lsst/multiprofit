[build-system]
requires = ["setuptools", "lsst-versions >= 1.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "lsst-multiprofit"
description = "Astronomical image and source model fitting code."
license = { file = "LICENSE" }
readme = "README.rst"
authors = [
    { name = "Rubin Observatory Data Management", email = "dm-admin@lists.lsst.org" },
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = [
    "astronomy",
    "astrophysics",
    "fitting",
    "lsst",
    "models",
    "modeling",
]
requires-python = ">=3.10.0"
dependencies = [
    "astropy",
    "lsst-gauss2d",
    "lsst-gauss2d-fit",
    "lsst-pex-config",
    "lsst-utils",
    "importlib_resources",
    "matplotlib",
    "numpy",
    "pydantic",
    "scipy",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/lsst/multiprofit"

[project.optional-dependencies]
test = [
    "pytest",
]

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[tool.black]
line-length = 110
target-version = ["py311"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.isort]
profile = "black"
line_length = 110
force_sort_within_sections = true

[tool.lsst_versions]
write_to = "python/lsst/multiprofit/version.py"

[tool.mypy]
plugins = [
    "pydantic.mypy"
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.numpydoc_validation]
checks = [
    "all", # All except the rules listed below.
    "ES01", # No extended summary required.
    "EX01", # Example section.
    "GL01", # Summary text can start on same line as """
    "GL08", # Do not require docstring.
    "PR04", # numpydoc parameter types are redundant with type hints
    "RT01", # Unfortunately our @property trigger this.
    "RT02", # Does not want named return value. DM style says we do.
    "SA01", # See Also section.
    "SA04", # We don't use descriptions with See Also.
    "SS05", # pydocstyle is better at finding infinitive verb.
    "SS06", # Summary can go into second line.
]

[tool.pydocstyle]
convention = "numpy"
# Our coding style does not require docstrings for magic methods (D105)
# Our docstyle documents __init__ at the class level (D107)
# We allow methods to inherit docstrings and this is not compatible with D102.
# Docstring at the very first line is not required
# D200, D205 and D400 all complain if the first sentence of the docstring does
# not fit on one line. We do not require docstrings in __init__ files (D104).
add-ignore = ["D107", "D105", "D102", "D100", "D200", "D205", "D400", "D104"]

[tool.ruff]
exclude = [
    "__init__.py",
    "examples/fithsc.py",
    "examples/test_utils.py",
    "tests/*.py",
]
line-length = 110
target-version = "py311"

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D100",
    "D102",
    "D104",
    "D105",
    "D107",
    "D200",
    "D205",
    "D400",
    "UP007", # Allow UNION in type annotation
]
select = [
    "E", # pycodestyle
    "F", # pycodestyle
    "N", # pep8-naming
    "W", # pycodestyle
    "D", # pydocstyle
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"
